name: Build and Deploy to ECR - BE

on:
  push:
    branches:
      - main  # main 브랜치에 푸시할 때 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
    
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: trinity-repo   # 생성한 ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }}    # 커밋 해시를 태그로 사용
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup SSH config
        run: |
          mkdir -p ~/.ssh
          # Bastion 호스트 설정
          echo "Host bastion
            HostName 13.124.67.16
            User ec2-user
            IdentityFile ~/.ssh/toby-instance-key.pem" > ~/.ssh/config
          
          # 프라이빗 인스턴스(be) 설정
          echo "Host ml
            HostName 10.0.133.177
            User ec2-user
            ProxyJump bastion
            IdentityFile ~/.ssh/toby-instance-key.pem" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: '10.0.133.177'
          username: ec2-user
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          proxy_host: '13.124.67.16'
          proxy_username: ec2-user
          proxy_key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # EC2 인스턴스에서 ECR 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 작업 디렉토리로 이동
            cd /home/ec2-user/TRI-BE
            
            # .env 파일 생성
            echo "
            
            # Database
            PROD_DATASOURCE_URL=jdbc:mysql://${{ secrets.RDS_ENDPOINT }}:3306/${{ secrets.RDS_DATABASE }}
            PROD_DATASOURCE_USERNAME=${{ secrets.RDS_USERNAME }}
            PROD_DATASOURCE_PASSWORD=${{ secrets.RDS_PASSWORD }}
            
            # Spring
            SPRING_PROFILES_ACTIVE=prod
            
            # Firebase
            FIREBASE_CREDENTIALS='{\"type\":\"service_account\",\"project_id\":\"catchping-fcmserver\",\"private_key_id\":\"${{ secrets.FIREBASE_PRIVATE_KEY_ID }}\",\"private_key\":\"${{ secrets.FIREBASE_PRIVATE_KEY }}\",\"client_email\":\"firebase-adminsdk-fbsvc@catchping-fcmserver.iam.gserviceaccount.com\",\"client_id\":\"108183397978808572520\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_x509_cert_url\":\"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40catchping-fcmserver.iam.gserviceaccount.com\",\"universe_domain\":\"googleapis.com\"}'
            
            # Kakao
            KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}
            KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" > .env
            
            # docker-compose.yml 업데이트
            echo "services:
              app:
                image: ${{ steps.login-ecr.outputs.registry }}/trinity-repo:${{ github.sha }} 
                container_name: catch-ping-app
                ports:
                  - "8080:8080"
                environment:
                  SPRING_PROFILES_ACTIVE: prod
                env_file:
                  - .env
                networks:
                  - ctc-network
                    
            networks:
              ctc-network:
                driver: bridge" > docker-compose.yml
            
            # 컨테이너 중지 및 삭제
            docker-compose down || true
            
            # 새 컨테이너 시작
            docker-compose up -d
            
            # 사용하지 않는 이미지 정리
            docker image prune -f
